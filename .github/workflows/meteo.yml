name: Test de météorologie

on: 
  push: 
    branches: 
      - master
  pull_request:
    branches:
      - master

jobs:
  test-meteo:
    runs-on: windows-latest

    steps:
    - name: Get le code
      uses: actions/checkout@v2

    - name: Installer Python
      uses: actions/setup-python@v2
      with: 
        python-version: '3.x'
      
    - name: Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv

    - name: Test de l'api de météo
      run: |
        $url = "https://api.openweathermap.org/data/2.5/weather?q=Paris&appid=${{ secrets.API_KEY }}&units=metric"
        $response = Invoke-RestMethod -Uri $url -Method Get
        $response | ConvertTo-Json -Depth 3


    - name: Vérifier si le serveur est en marche
      run: |
        try {
          $url = "http://localhost:5001/submit"
          $response = Invoke-RestMethod -Uri $url -Method Get -TimeoutSec 5
          Write-Host "Le serveur est en marche, envoie la requête."
        } catch {
          Write-Host "Le serveur n'est pas en marche, démarrage du serveur..."
          Start-Process "python" -ArgumentList "path/to/your/server/script.py"
          Start-Sleep -Seconds 15 # Attendre que le serveur démarre
          Write-Host "Serveur démarré, envoie la requête."
        }

    - name: Test de notre projet
      run: |
        $response = Invoke-WebRequest -Uri "http://localhost:5001/submit" -Method POST -Body city='Atakpame' -Headers @{ "Authorization" = "Bearer fc9a84b33a13593aca9630e7b38830d1" }
        Write-Output "Response: $($response)"
        if ($response.StatusCode -eq 200) {
            Write-Host "Test réussi"
        } else {
            Write-Host "Test échoué"
        }
      
    - name: Stop server
      run: |
        Stop-Process -Name "python" -Force  # Assurez-vous que le nom du processus est correct
