
# Workflow réutilisable pour la vérification du serveur météo et de ses dépendances
name: Verify Server and Dependencies

# Définition des événements déclencheurs
on:
  workflow_call:  # Permet la réutilisation par d'autres workflows
    inputs:
      python-version:
        description: 'Version de Python à utiliser'
        required: false
        default: '3.9'
        type: string
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Variables d'environnement globales
env:
  SERVER_PORT: 5001
  REQUIRED_FILES: |
    access.log
    accueil.html
    expose_py.py
    middleware.py
    pays.html
    property.env
    reponse_meteo.html
    ville.html

jobs:
  verify-structure:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify required files
        run: |
          echo "Vérification de la présence des fichiers requis..."
          $missingFiles = @()
          foreach ($file in '${{ env.REQUIRED_FILES }}' -split '\n' | Where-Object { $_ -match '\S' }) {
            if (-not (Test-Path $file)) {
              $missingFiles += $file
            }
          }
          if ($missingFiles.Count -gt 0) {
            Write-Error "Fichiers manquants : $($missingFiles -join ', ')"
            exit 1
          }
        shell: pwsh

      - name: Verify HTML forms
        run: |
          echo "Vérification des formulaires HTML..."
          
          # Vérification de ville.html
          $villeContent = Get-Content -Path ville.html -Raw
          if (-not ($villeContent -match 'form.*action="/submit".*method="POST"' -and 
                    $villeContent -match 'input.*name="city".*')) {
            Write-Error "ville.html : Formulaire ou champ 'city' manquant"
            exit 1
          }
          
          # Vérification de pays.html
          $paysContent = Get-Content -Path pays.html -Raw
          if (-not ($paysContent -match 'form.*action="/soumettre".*method="POST"' -and 
                    $paysContent -match 'input.*name="pays".*')) {
            Write-Error "pays.html : Formulaire ou champ 'pays' manquant"
            exit 1
          }
        shell: pwsh

      - name: Verify navigation buttons
        run: |
          echo "Vérification des boutons de navigation..."
          
          # Vérification des liens dans accueil.html
          $accueilContent = Get-Content -Path accueil.html -Raw
          if (-not ($accueilContent -match 'href="/meteo"' -and 
                    $accueilContent -match 'href="/pays"')) {
            Write-Error "accueil.html : Liens de navigation manquants"
            exit 1
          }
          
          # Vérification des boutons retour
          foreach ($file in @('ville.html', 'pays.html', 'reponse_meteo.html')) {
            $content = Get-Content -Path $file -Raw
            if (-not ($content -match 'href="/".*Retour')) {
              Write-Error "$file : Bouton retour manquant"
              exit 1
            }
          }
        shell: pwsh

      - name: Verify response structure
        run: |
          echo "Vérification de la structure des réponses..."
          
          # Vérification des champs dans expose_py.py
          $exposeContent = Get-Content -Path expose_py.py -Raw
          $requiredFields = @(
            'city', 'temperature', 'weather', 'humidity',  # Champs météo
            'pays', 'capital', 'population', 'languages', 'region', 'area'  # Champs pays
          )
          
          foreach ($field in $requiredFields) {
            if (-not ($exposeContent -match $field)) {
              Write-Error "expose_py.py : Champ '$field' manquant dans la structure de réponse"
              exit 1
            }
          }
        shell: pwsh

  verify-server:
    needs: verify-structure
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests
        
      - name: Create test environment file
        run: |
          echo "API_KEY=test_key" > property.env
        shell: pwsh

      - name: Start server
        run: |
          Start-Process python -ArgumentList "expose_py.py" -NoNewWindow
          Start-Sleep -Seconds 5
        shell: pwsh

      - name: Test server endpoints
        run: |
          $endpoints = @('/ville', '/pays', '/')
          foreach ($endpoint in $endpoints) {
            $response = Invoke-WebRequest -Uri "http://localhost:${{ env.SERVER_PORT }}$endpoint" -ErrorAction Stop
            if ($response.StatusCode -ne 200) {
              Write-Error "Endpoint $endpoint returned status code $($response.StatusCode)"
              exit 1
            }
            Write-Host "Endpoint $endpoint is responding correctly"
          }
        shell: pwsh

  test-middleware:
    needs: verify-server
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test middleware logging
        run: |
          # Démarrage du serveur
          Start-Process python -ArgumentList "expose_py.py" -NoNewWindow
          Start-Sleep -Seconds 5
          
          # Test des requêtes
          Invoke-WebRequest -Uri "http://localhost:${{ env.SERVER_PORT }}/ville" -ErrorAction Stop
          Invoke-WebRequest -Uri "http://localhost:${{ env.SERVER_PORT }}/pays" -ErrorAction Stop
          Start-Sleep -Seconds 2
          
          # Vérification des logs
          $logContent = Get-Content -Path access.log
          if (-not ($logContent -match "GET /ville" -and $logContent -match "GET /pays")) {
            Write-Error "Les entrées de log attendues sont manquantes"
            exit 1
          }
        shell: pwsh

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: server-logs
          path: access.log
          retention-days: 5
